#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'testeio' in
 * file './testeio.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'two_port_mem_correct', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'TWO_PORT_MEM_CORRECT_'.
 * The prefix is the slave descriptor.
 */
#define TWO_PORT_MEM_CORRECT_COMPONENT_TYPE altera_avalon_onchip_memory2
#define TWO_PORT_MEM_CORRECT_COMPONENT_NAME two_port_mem_correct
#define TWO_PORT_MEM_CORRECT_BASE 0x0
#define TWO_PORT_MEM_CORRECT_SPAN 131072
#define TWO_PORT_MEM_CORRECT_END 0x1ffff
#define TWO_PORT_MEM_CORRECT_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define TWO_PORT_MEM_CORRECT_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define TWO_PORT_MEM_CORRECT_CONTENTS_INFO ""
#define TWO_PORT_MEM_CORRECT_DUAL_PORT 1
#define TWO_PORT_MEM_CORRECT_GUI_RAM_BLOCK_TYPE AUTO
#define TWO_PORT_MEM_CORRECT_INIT_CONTENTS_FILE testeio_two_port_mem_correct
#define TWO_PORT_MEM_CORRECT_INIT_MEM_CONTENT 1
#define TWO_PORT_MEM_CORRECT_INSTANCE_ID NONE
#define TWO_PORT_MEM_CORRECT_NON_DEFAULT_INIT_FILE_ENABLED 0
#define TWO_PORT_MEM_CORRECT_RAM_BLOCK_TYPE AUTO
#define TWO_PORT_MEM_CORRECT_READ_DURING_WRITE_MODE DONT_CARE
#define TWO_PORT_MEM_CORRECT_SINGLE_CLOCK_OP 0
#define TWO_PORT_MEM_CORRECT_SIZE_MULTIPLE 1
#define TWO_PORT_MEM_CORRECT_SIZE_VALUE 131072
#define TWO_PORT_MEM_CORRECT_WRITABLE 1
#define TWO_PORT_MEM_CORRECT_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define TWO_PORT_MEM_CORRECT_MEMORY_INFO_GENERATE_DAT_SYM 1
#define TWO_PORT_MEM_CORRECT_MEMORY_INFO_GENERATE_HEX 1
#define TWO_PORT_MEM_CORRECT_MEMORY_INFO_HAS_BYTE_LANE 0
#define TWO_PORT_MEM_CORRECT_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define TWO_PORT_MEM_CORRECT_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define TWO_PORT_MEM_CORRECT_MEMORY_INFO_MEM_INIT_FILENAME testeio_two_port_mem_correct

/*
 * Macros for device 'two_port_mem', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'TWO_PORT_MEM_'.
 * The prefix is the slave descriptor.
 */
#define TWO_PORT_MEM_COMPONENT_TYPE altera_avalon_onchip_memory2
#define TWO_PORT_MEM_COMPONENT_NAME two_port_mem
#define TWO_PORT_MEM_BASE 0x20000
#define TWO_PORT_MEM_SPAN 131072
#define TWO_PORT_MEM_END 0x3ffff
#define TWO_PORT_MEM_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define TWO_PORT_MEM_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define TWO_PORT_MEM_CONTENTS_INFO ""
#define TWO_PORT_MEM_DUAL_PORT 1
#define TWO_PORT_MEM_GUI_RAM_BLOCK_TYPE AUTO
#define TWO_PORT_MEM_INIT_CONTENTS_FILE testeio_two_port_mem
#define TWO_PORT_MEM_INIT_MEM_CONTENT 1
#define TWO_PORT_MEM_INSTANCE_ID NONE
#define TWO_PORT_MEM_NON_DEFAULT_INIT_FILE_ENABLED 0
#define TWO_PORT_MEM_RAM_BLOCK_TYPE AUTO
#define TWO_PORT_MEM_READ_DURING_WRITE_MODE DONT_CARE
#define TWO_PORT_MEM_SINGLE_CLOCK_OP 0
#define TWO_PORT_MEM_SIZE_MULTIPLE 1
#define TWO_PORT_MEM_SIZE_VALUE 131072
#define TWO_PORT_MEM_WRITABLE 1
#define TWO_PORT_MEM_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define TWO_PORT_MEM_MEMORY_INFO_GENERATE_DAT_SYM 1
#define TWO_PORT_MEM_MEMORY_INFO_GENERATE_HEX 1
#define TWO_PORT_MEM_MEMORY_INFO_HAS_BYTE_LANE 0
#define TWO_PORT_MEM_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define TWO_PORT_MEM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define TWO_PORT_MEM_MEMORY_INFO_MEM_INIT_FILENAME testeio_two_port_mem

/*
 * Macros for device 'preparingNextSample', class 'altera_avalon_pio'
 * The macros are prefixed with 'PREPARINGNEXTSAMPLE_'.
 * The prefix is the slave descriptor.
 */
#define PREPARINGNEXTSAMPLE_COMPONENT_TYPE altera_avalon_pio
#define PREPARINGNEXTSAMPLE_COMPONENT_NAME preparingNextSample
#define PREPARINGNEXTSAMPLE_BASE 0x40000
#define PREPARINGNEXTSAMPLE_SPAN 16
#define PREPARINGNEXTSAMPLE_END 0x4000f
#define PREPARINGNEXTSAMPLE_BIT_CLEARING_EDGE_REGISTER 0
#define PREPARINGNEXTSAMPLE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PREPARINGNEXTSAMPLE_CAPTURE 0
#define PREPARINGNEXTSAMPLE_DATA_WIDTH 32
#define PREPARINGNEXTSAMPLE_DO_TEST_BENCH_WIRING 0
#define PREPARINGNEXTSAMPLE_DRIVEN_SIM_VALUE 0
#define PREPARINGNEXTSAMPLE_EDGE_TYPE NONE
#define PREPARINGNEXTSAMPLE_FREQ 50000000
#define PREPARINGNEXTSAMPLE_HAS_IN 0
#define PREPARINGNEXTSAMPLE_HAS_OUT 1
#define PREPARINGNEXTSAMPLE_HAS_TRI 0
#define PREPARINGNEXTSAMPLE_IRQ_TYPE NONE
#define PREPARINGNEXTSAMPLE_RESET_VALUE 0

/*
 * Macros for device 'nextSample', class 'altera_avalon_pio'
 * The macros are prefixed with 'NEXTSAMPLE_'.
 * The prefix is the slave descriptor.
 */
#define NEXTSAMPLE_COMPONENT_TYPE altera_avalon_pio
#define NEXTSAMPLE_COMPONENT_NAME nextSample
#define NEXTSAMPLE_BASE 0x40010
#define NEXTSAMPLE_SPAN 16
#define NEXTSAMPLE_END 0x4001f
#define NEXTSAMPLE_BIT_CLEARING_EDGE_REGISTER 0
#define NEXTSAMPLE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NEXTSAMPLE_CAPTURE 0
#define NEXTSAMPLE_DATA_WIDTH 32
#define NEXTSAMPLE_DO_TEST_BENCH_WIRING 0
#define NEXTSAMPLE_DRIVEN_SIM_VALUE 0
#define NEXTSAMPLE_EDGE_TYPE NONE
#define NEXTSAMPLE_FREQ 50000000
#define NEXTSAMPLE_HAS_IN 1
#define NEXTSAMPLE_HAS_OUT 0
#define NEXTSAMPLE_HAS_TRI 0
#define NEXTSAMPLE_IRQ_TYPE NONE
#define NEXTSAMPLE_RESET_VALUE 0

/*
 * Macros for device 'sampleIndex', class 'altera_avalon_pio'
 * The macros are prefixed with 'SAMPLEINDEX_'.
 * The prefix is the slave descriptor.
 */
#define SAMPLEINDEX_COMPONENT_TYPE altera_avalon_pio
#define SAMPLEINDEX_COMPONENT_NAME sampleIndex
#define SAMPLEINDEX_BASE 0x40050
#define SAMPLEINDEX_SPAN 16
#define SAMPLEINDEX_END 0x4005f
#define SAMPLEINDEX_BIT_CLEARING_EDGE_REGISTER 0
#define SAMPLEINDEX_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SAMPLEINDEX_CAPTURE 0
#define SAMPLEINDEX_DATA_WIDTH 32
#define SAMPLEINDEX_DO_TEST_BENCH_WIRING 0
#define SAMPLEINDEX_DRIVEN_SIM_VALUE 0
#define SAMPLEINDEX_EDGE_TYPE NONE
#define SAMPLEINDEX_FREQ 50000000
#define SAMPLEINDEX_HAS_IN 0
#define SAMPLEINDEX_HAS_OUT 1
#define SAMPLEINDEX_HAS_TRI 0
#define SAMPLEINDEX_IRQ_TYPE NONE
#define SAMPLEINDEX_RESET_VALUE 0

/*
 * Macros for device 'writeSample', class 'altera_avalon_pio'
 * The macros are prefixed with 'WRITESAMPLE_'.
 * The prefix is the slave descriptor.
 */
#define WRITESAMPLE_COMPONENT_TYPE altera_avalon_pio
#define WRITESAMPLE_COMPONENT_NAME writeSample
#define WRITESAMPLE_BASE 0x40060
#define WRITESAMPLE_SPAN 16
#define WRITESAMPLE_END 0x4006f
#define WRITESAMPLE_BIT_CLEARING_EDGE_REGISTER 0
#define WRITESAMPLE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define WRITESAMPLE_CAPTURE 0
#define WRITESAMPLE_DATA_WIDTH 32
#define WRITESAMPLE_DO_TEST_BENCH_WIRING 0
#define WRITESAMPLE_DRIVEN_SIM_VALUE 0
#define WRITESAMPLE_EDGE_TYPE NONE
#define WRITESAMPLE_FREQ 50000000
#define WRITESAMPLE_HAS_IN 0
#define WRITESAMPLE_HAS_OUT 1
#define WRITESAMPLE_HAS_TRI 0
#define WRITESAMPLE_IRQ_TYPE NONE
#define WRITESAMPLE_RESET_VALUE 0

/*
 * Macros for device 'expected_output_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_0_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_0_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_0_COMPONENT_NAME expected_output_0
#define EXPECTED_OUTPUT_0_BASE 0x40070
#define EXPECTED_OUTPUT_0_SPAN 16
#define EXPECTED_OUTPUT_0_END 0x4007f
#define EXPECTED_OUTPUT_0_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_0_CAPTURE 0
#define EXPECTED_OUTPUT_0_DATA_WIDTH 32
#define EXPECTED_OUTPUT_0_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_0_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_0_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_0_FREQ 50000000
#define EXPECTED_OUTPUT_0_HAS_IN 0
#define EXPECTED_OUTPUT_0_HAS_OUT 1
#define EXPECTED_OUTPUT_0_HAS_TRI 0
#define EXPECTED_OUTPUT_0_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_0_RESET_VALUE 0

/*
 * Macros for device 'sequences_to_process', class 'altera_avalon_pio'
 * The macros are prefixed with 'SEQUENCES_TO_PROCESS_'.
 * The prefix is the slave descriptor.
 */
#define SEQUENCES_TO_PROCESS_COMPONENT_TYPE altera_avalon_pio
#define SEQUENCES_TO_PROCESS_COMPONENT_NAME sequences_to_process
#define SEQUENCES_TO_PROCESS_BASE 0x40080
#define SEQUENCES_TO_PROCESS_SPAN 16
#define SEQUENCES_TO_PROCESS_END 0x4008f
#define SEQUENCES_TO_PROCESS_BIT_CLEARING_EDGE_REGISTER 0
#define SEQUENCES_TO_PROCESS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SEQUENCES_TO_PROCESS_CAPTURE 0
#define SEQUENCES_TO_PROCESS_DATA_WIDTH 32
#define SEQUENCES_TO_PROCESS_DO_TEST_BENCH_WIRING 0
#define SEQUENCES_TO_PROCESS_DRIVEN_SIM_VALUE 0
#define SEQUENCES_TO_PROCESS_EDGE_TYPE NONE
#define SEQUENCES_TO_PROCESS_FREQ 50000000
#define SEQUENCES_TO_PROCESS_HAS_IN 0
#define SEQUENCES_TO_PROCESS_HAS_OUT 1
#define SEQUENCES_TO_PROCESS_HAS_TRI 0
#define SEQUENCES_TO_PROCESS_IRQ_TYPE NONE
#define SEQUENCES_TO_PROCESS_RESET_VALUE 0

/*
 * Macros for device 'valid_output_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_0_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_0_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_0_COMPONENT_NAME valid_output_0
#define VALID_OUTPUT_0_BASE 0x40090
#define VALID_OUTPUT_0_SPAN 16
#define VALID_OUTPUT_0_END 0x4009f
#define VALID_OUTPUT_0_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_0_CAPTURE 0
#define VALID_OUTPUT_0_DATA_WIDTH 32
#define VALID_OUTPUT_0_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_0_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_0_EDGE_TYPE NONE
#define VALID_OUTPUT_0_FREQ 50000000
#define VALID_OUTPUT_0_HAS_IN 0
#define VALID_OUTPUT_0_HAS_OUT 1
#define VALID_OUTPUT_0_HAS_TRI 0
#define VALID_OUTPUT_0_IRQ_TYPE NONE
#define VALID_OUTPUT_0_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_0_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_0_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_0_COMPONENT_NAME input_sequence_0
#define INPUT_SEQUENCE_0_BASE 0x400a0
#define INPUT_SEQUENCE_0_SPAN 16
#define INPUT_SEQUENCE_0_END 0x400af
#define INPUT_SEQUENCE_0_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_0_CAPTURE 0
#define INPUT_SEQUENCE_0_DATA_WIDTH 32
#define INPUT_SEQUENCE_0_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_0_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_0_EDGE_TYPE NONE
#define INPUT_SEQUENCE_0_FREQ 50000000
#define INPUT_SEQUENCE_0_HAS_IN 0
#define INPUT_SEQUENCE_0_HAS_OUT 1
#define INPUT_SEQUENCE_0_HAS_TRI 0
#define INPUT_SEQUENCE_0_IRQ_TYPE NONE
#define INPUT_SEQUENCE_0_RESET_VALUE 0

/*
 * Macros for device 'error_sum_7', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_7_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_7_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_7_COMPONENT_NAME error_sum_7
#define ERROR_SUM_7_BASE 0x400b0
#define ERROR_SUM_7_SPAN 16
#define ERROR_SUM_7_END 0x400bf
#define ERROR_SUM_7_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_7_CAPTURE 0
#define ERROR_SUM_7_DATA_WIDTH 32
#define ERROR_SUM_7_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_7_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_7_EDGE_TYPE NONE
#define ERROR_SUM_7_FREQ 50000000
#define ERROR_SUM_7_HAS_IN 1
#define ERROR_SUM_7_HAS_OUT 0
#define ERROR_SUM_7_HAS_TRI 0
#define ERROR_SUM_7_IRQ_TYPE NONE
#define ERROR_SUM_7_RESET_VALUE 0

/*
 * Macros for device 'error_sum_6', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_6_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_6_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_6_COMPONENT_NAME error_sum_6
#define ERROR_SUM_6_BASE 0x400c0
#define ERROR_SUM_6_SPAN 16
#define ERROR_SUM_6_END 0x400cf
#define ERROR_SUM_6_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_6_CAPTURE 0
#define ERROR_SUM_6_DATA_WIDTH 32
#define ERROR_SUM_6_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_6_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_6_EDGE_TYPE NONE
#define ERROR_SUM_6_FREQ 50000000
#define ERROR_SUM_6_HAS_IN 1
#define ERROR_SUM_6_HAS_OUT 0
#define ERROR_SUM_6_HAS_TRI 0
#define ERROR_SUM_6_IRQ_TYPE NONE
#define ERROR_SUM_6_RESET_VALUE 0

/*
 * Macros for device 'error_sum_5', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_5_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_5_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_5_COMPONENT_NAME error_sum_5
#define ERROR_SUM_5_BASE 0x400d0
#define ERROR_SUM_5_SPAN 16
#define ERROR_SUM_5_END 0x400df
#define ERROR_SUM_5_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_5_CAPTURE 0
#define ERROR_SUM_5_DATA_WIDTH 32
#define ERROR_SUM_5_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_5_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_5_EDGE_TYPE NONE
#define ERROR_SUM_5_FREQ 50000000
#define ERROR_SUM_5_HAS_IN 1
#define ERROR_SUM_5_HAS_OUT 0
#define ERROR_SUM_5_HAS_TRI 0
#define ERROR_SUM_5_IRQ_TYPE NONE
#define ERROR_SUM_5_RESET_VALUE 0

/*
 * Macros for device 'error_sum_4', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_4_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_4_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_4_COMPONENT_NAME error_sum_4
#define ERROR_SUM_4_BASE 0x400e0
#define ERROR_SUM_4_SPAN 16
#define ERROR_SUM_4_END 0x400ef
#define ERROR_SUM_4_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_4_CAPTURE 0
#define ERROR_SUM_4_DATA_WIDTH 32
#define ERROR_SUM_4_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_4_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_4_EDGE_TYPE NONE
#define ERROR_SUM_4_FREQ 50000000
#define ERROR_SUM_4_HAS_IN 1
#define ERROR_SUM_4_HAS_OUT 0
#define ERROR_SUM_4_HAS_TRI 0
#define ERROR_SUM_4_IRQ_TYPE NONE
#define ERROR_SUM_4_RESET_VALUE 0

/*
 * Macros for device 'error_sum_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_3_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_3_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_3_COMPONENT_NAME error_sum_3
#define ERROR_SUM_3_BASE 0x400f0
#define ERROR_SUM_3_SPAN 16
#define ERROR_SUM_3_END 0x400ff
#define ERROR_SUM_3_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_3_CAPTURE 0
#define ERROR_SUM_3_DATA_WIDTH 32
#define ERROR_SUM_3_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_3_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_3_EDGE_TYPE NONE
#define ERROR_SUM_3_FREQ 50000000
#define ERROR_SUM_3_HAS_IN 1
#define ERROR_SUM_3_HAS_OUT 0
#define ERROR_SUM_3_HAS_TRI 0
#define ERROR_SUM_3_IRQ_TYPE NONE
#define ERROR_SUM_3_RESET_VALUE 0

/*
 * Macros for device 'error_sum_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_2_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_2_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_2_COMPONENT_NAME error_sum_2
#define ERROR_SUM_2_BASE 0x40100
#define ERROR_SUM_2_SPAN 16
#define ERROR_SUM_2_END 0x4010f
#define ERROR_SUM_2_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_2_CAPTURE 0
#define ERROR_SUM_2_DATA_WIDTH 32
#define ERROR_SUM_2_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_2_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_2_EDGE_TYPE NONE
#define ERROR_SUM_2_FREQ 50000000
#define ERROR_SUM_2_HAS_IN 1
#define ERROR_SUM_2_HAS_OUT 0
#define ERROR_SUM_2_HAS_TRI 0
#define ERROR_SUM_2_IRQ_TYPE NONE
#define ERROR_SUM_2_RESET_VALUE 0

/*
 * Macros for device 'error_sum_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_1_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_1_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_1_COMPONENT_NAME error_sum_1
#define ERROR_SUM_1_BASE 0x40110
#define ERROR_SUM_1_SPAN 16
#define ERROR_SUM_1_END 0x4011f
#define ERROR_SUM_1_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_1_CAPTURE 0
#define ERROR_SUM_1_DATA_WIDTH 32
#define ERROR_SUM_1_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_1_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_1_EDGE_TYPE NONE
#define ERROR_SUM_1_FREQ 50000000
#define ERROR_SUM_1_HAS_IN 1
#define ERROR_SUM_1_HAS_OUT 0
#define ERROR_SUM_1_HAS_TRI 0
#define ERROR_SUM_1_IRQ_TYPE NONE
#define ERROR_SUM_1_RESET_VALUE 0

/*
 * Macros for device 'error_sum_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_0_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_0_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_0_COMPONENT_NAME error_sum_0
#define ERROR_SUM_0_BASE 0x40120
#define ERROR_SUM_0_SPAN 16
#define ERROR_SUM_0_END 0x4012f
#define ERROR_SUM_0_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_0_CAPTURE 0
#define ERROR_SUM_0_DATA_WIDTH 32
#define ERROR_SUM_0_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_0_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_0_EDGE_TYPE NONE
#define ERROR_SUM_0_FREQ 50000000
#define ERROR_SUM_0_HAS_IN 1
#define ERROR_SUM_0_HAS_OUT 0
#define ERROR_SUM_0_HAS_TRI 0
#define ERROR_SUM_0_IRQ_TYPE NONE
#define ERROR_SUM_0_RESET_VALUE 0

/*
 * Macros for device 'done_processing_feedback', class 'altera_avalon_pio'
 * The macros are prefixed with 'DONE_PROCESSING_FEEDBACK_'.
 * The prefix is the slave descriptor.
 */
#define DONE_PROCESSING_FEEDBACK_COMPONENT_TYPE altera_avalon_pio
#define DONE_PROCESSING_FEEDBACK_COMPONENT_NAME done_processing_feedback
#define DONE_PROCESSING_FEEDBACK_BASE 0x40130
#define DONE_PROCESSING_FEEDBACK_SPAN 16
#define DONE_PROCESSING_FEEDBACK_END 0x4013f
#define DONE_PROCESSING_FEEDBACK_BIT_CLEARING_EDGE_REGISTER 0
#define DONE_PROCESSING_FEEDBACK_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DONE_PROCESSING_FEEDBACK_CAPTURE 0
#define DONE_PROCESSING_FEEDBACK_DATA_WIDTH 1
#define DONE_PROCESSING_FEEDBACK_DO_TEST_BENCH_WIRING 0
#define DONE_PROCESSING_FEEDBACK_DRIVEN_SIM_VALUE 0
#define DONE_PROCESSING_FEEDBACK_EDGE_TYPE NONE
#define DONE_PROCESSING_FEEDBACK_FREQ 50000000
#define DONE_PROCESSING_FEEDBACK_HAS_IN 0
#define DONE_PROCESSING_FEEDBACK_HAS_OUT 1
#define DONE_PROCESSING_FEEDBACK_HAS_TRI 0
#define DONE_PROCESSING_FEEDBACK_IRQ_TYPE NONE
#define DONE_PROCESSING_FEEDBACK_RESET_VALUE 0

/*
 * Macros for device 'ready_to_process', class 'altera_avalon_pio'
 * The macros are prefixed with 'READY_TO_PROCESS_'.
 * The prefix is the slave descriptor.
 */
#define READY_TO_PROCESS_COMPONENT_TYPE altera_avalon_pio
#define READY_TO_PROCESS_COMPONENT_NAME ready_to_process
#define READY_TO_PROCESS_BASE 0x40140
#define READY_TO_PROCESS_SPAN 16
#define READY_TO_PROCESS_END 0x4014f
#define READY_TO_PROCESS_BIT_CLEARING_EDGE_REGISTER 0
#define READY_TO_PROCESS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define READY_TO_PROCESS_CAPTURE 0
#define READY_TO_PROCESS_DATA_WIDTH 1
#define READY_TO_PROCESS_DO_TEST_BENCH_WIRING 0
#define READY_TO_PROCESS_DRIVEN_SIM_VALUE 0
#define READY_TO_PROCESS_EDGE_TYPE NONE
#define READY_TO_PROCESS_FREQ 50000000
#define READY_TO_PROCESS_HAS_IN 1
#define READY_TO_PROCESS_HAS_OUT 0
#define READY_TO_PROCESS_HAS_TRI 0
#define READY_TO_PROCESS_IRQ_TYPE NONE
#define READY_TO_PROCESS_RESET_VALUE 0

/*
 * Macros for device 'done_processing_chrom', class 'altera_avalon_pio'
 * The macros are prefixed with 'DONE_PROCESSING_CHROM_'.
 * The prefix is the slave descriptor.
 */
#define DONE_PROCESSING_CHROM_COMPONENT_TYPE altera_avalon_pio
#define DONE_PROCESSING_CHROM_COMPONENT_NAME done_processing_chrom
#define DONE_PROCESSING_CHROM_BASE 0x40150
#define DONE_PROCESSING_CHROM_SPAN 16
#define DONE_PROCESSING_CHROM_END 0x4015f
#define DONE_PROCESSING_CHROM_BIT_CLEARING_EDGE_REGISTER 0
#define DONE_PROCESSING_CHROM_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DONE_PROCESSING_CHROM_CAPTURE 0
#define DONE_PROCESSING_CHROM_DATA_WIDTH 1
#define DONE_PROCESSING_CHROM_DO_TEST_BENCH_WIRING 0
#define DONE_PROCESSING_CHROM_DRIVEN_SIM_VALUE 0
#define DONE_PROCESSING_CHROM_EDGE_TYPE NONE
#define DONE_PROCESSING_CHROM_FREQ 50000000
#define DONE_PROCESSING_CHROM_HAS_IN 1
#define DONE_PROCESSING_CHROM_HAS_OUT 0
#define DONE_PROCESSING_CHROM_HAS_TRI 0
#define DONE_PROCESSING_CHROM_IRQ_TYPE NONE
#define DONE_PROCESSING_CHROM_RESET_VALUE 0

/*
 * Macros for device 'start_processing_chrom', class 'altera_avalon_pio'
 * The macros are prefixed with 'START_PROCESSING_CHROM_'.
 * The prefix is the slave descriptor.
 */
#define START_PROCESSING_CHROM_COMPONENT_TYPE altera_avalon_pio
#define START_PROCESSING_CHROM_COMPONENT_NAME start_processing_chrom
#define START_PROCESSING_CHROM_BASE 0x40160
#define START_PROCESSING_CHROM_SPAN 16
#define START_PROCESSING_CHROM_END 0x4016f
#define START_PROCESSING_CHROM_BIT_CLEARING_EDGE_REGISTER 0
#define START_PROCESSING_CHROM_BIT_MODIFYING_OUTPUT_REGISTER 0
#define START_PROCESSING_CHROM_CAPTURE 0
#define START_PROCESSING_CHROM_DATA_WIDTH 1
#define START_PROCESSING_CHROM_DO_TEST_BENCH_WIRING 0
#define START_PROCESSING_CHROM_DRIVEN_SIM_VALUE 0
#define START_PROCESSING_CHROM_EDGE_TYPE NONE
#define START_PROCESSING_CHROM_FREQ 50000000
#define START_PROCESSING_CHROM_HAS_IN 0
#define START_PROCESSING_CHROM_HAS_OUT 1
#define START_PROCESSING_CHROM_HAS_TRI 0
#define START_PROCESSING_CHROM_IRQ_TYPE NONE
#define START_PROCESSING_CHROM_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_30', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_30_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_30_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_30_COMPONENT_NAME chrom_seg_30
#define CHROM_SEG_30_BASE 0x40170
#define CHROM_SEG_30_SPAN 16
#define CHROM_SEG_30_END 0x4017f
#define CHROM_SEG_30_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_30_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_30_CAPTURE 0
#define CHROM_SEG_30_DATA_WIDTH 32
#define CHROM_SEG_30_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_30_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_30_EDGE_TYPE NONE
#define CHROM_SEG_30_FREQ 50000000
#define CHROM_SEG_30_HAS_IN 0
#define CHROM_SEG_30_HAS_OUT 1
#define CHROM_SEG_30_HAS_TRI 0
#define CHROM_SEG_30_IRQ_TYPE NONE
#define CHROM_SEG_30_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_29', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_29_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_29_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_29_COMPONENT_NAME chrom_seg_29
#define CHROM_SEG_29_BASE 0x40180
#define CHROM_SEG_29_SPAN 16
#define CHROM_SEG_29_END 0x4018f
#define CHROM_SEG_29_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_29_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_29_CAPTURE 0
#define CHROM_SEG_29_DATA_WIDTH 32
#define CHROM_SEG_29_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_29_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_29_EDGE_TYPE NONE
#define CHROM_SEG_29_FREQ 50000000
#define CHROM_SEG_29_HAS_IN 0
#define CHROM_SEG_29_HAS_OUT 1
#define CHROM_SEG_29_HAS_TRI 0
#define CHROM_SEG_29_IRQ_TYPE NONE
#define CHROM_SEG_29_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_28', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_28_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_28_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_28_COMPONENT_NAME chrom_seg_28
#define CHROM_SEG_28_BASE 0x40190
#define CHROM_SEG_28_SPAN 16
#define CHROM_SEG_28_END 0x4019f
#define CHROM_SEG_28_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_28_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_28_CAPTURE 0
#define CHROM_SEG_28_DATA_WIDTH 32
#define CHROM_SEG_28_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_28_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_28_EDGE_TYPE NONE
#define CHROM_SEG_28_FREQ 50000000
#define CHROM_SEG_28_HAS_IN 0
#define CHROM_SEG_28_HAS_OUT 1
#define CHROM_SEG_28_HAS_TRI 0
#define CHROM_SEG_28_IRQ_TYPE NONE
#define CHROM_SEG_28_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_27', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_27_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_27_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_27_COMPONENT_NAME chrom_seg_27
#define CHROM_SEG_27_BASE 0x401a0
#define CHROM_SEG_27_SPAN 16
#define CHROM_SEG_27_END 0x401af
#define CHROM_SEG_27_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_27_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_27_CAPTURE 0
#define CHROM_SEG_27_DATA_WIDTH 32
#define CHROM_SEG_27_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_27_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_27_EDGE_TYPE NONE
#define CHROM_SEG_27_FREQ 50000000
#define CHROM_SEG_27_HAS_IN 0
#define CHROM_SEG_27_HAS_OUT 1
#define CHROM_SEG_27_HAS_TRI 0
#define CHROM_SEG_27_IRQ_TYPE NONE
#define CHROM_SEG_27_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_26', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_26_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_26_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_26_COMPONENT_NAME chrom_seg_26
#define CHROM_SEG_26_BASE 0x401b0
#define CHROM_SEG_26_SPAN 16
#define CHROM_SEG_26_END 0x401bf
#define CHROM_SEG_26_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_26_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_26_CAPTURE 0
#define CHROM_SEG_26_DATA_WIDTH 32
#define CHROM_SEG_26_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_26_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_26_EDGE_TYPE NONE
#define CHROM_SEG_26_FREQ 50000000
#define CHROM_SEG_26_HAS_IN 0
#define CHROM_SEG_26_HAS_OUT 1
#define CHROM_SEG_26_HAS_TRI 0
#define CHROM_SEG_26_IRQ_TYPE NONE
#define CHROM_SEG_26_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_25', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_25_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_25_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_25_COMPONENT_NAME chrom_seg_25
#define CHROM_SEG_25_BASE 0x401c0
#define CHROM_SEG_25_SPAN 16
#define CHROM_SEG_25_END 0x401cf
#define CHROM_SEG_25_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_25_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_25_CAPTURE 0
#define CHROM_SEG_25_DATA_WIDTH 32
#define CHROM_SEG_25_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_25_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_25_EDGE_TYPE NONE
#define CHROM_SEG_25_FREQ 50000000
#define CHROM_SEG_25_HAS_IN 0
#define CHROM_SEG_25_HAS_OUT 1
#define CHROM_SEG_25_HAS_TRI 0
#define CHROM_SEG_25_IRQ_TYPE NONE
#define CHROM_SEG_25_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_24', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_24_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_24_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_24_COMPONENT_NAME chrom_seg_24
#define CHROM_SEG_24_BASE 0x401d0
#define CHROM_SEG_24_SPAN 16
#define CHROM_SEG_24_END 0x401df
#define CHROM_SEG_24_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_24_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_24_CAPTURE 0
#define CHROM_SEG_24_DATA_WIDTH 32
#define CHROM_SEG_24_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_24_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_24_EDGE_TYPE NONE
#define CHROM_SEG_24_FREQ 50000000
#define CHROM_SEG_24_HAS_IN 0
#define CHROM_SEG_24_HAS_OUT 1
#define CHROM_SEG_24_HAS_TRI 0
#define CHROM_SEG_24_IRQ_TYPE NONE
#define CHROM_SEG_24_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_23', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_23_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_23_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_23_COMPONENT_NAME chrom_seg_23
#define CHROM_SEG_23_BASE 0x401e0
#define CHROM_SEG_23_SPAN 16
#define CHROM_SEG_23_END 0x401ef
#define CHROM_SEG_23_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_23_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_23_CAPTURE 0
#define CHROM_SEG_23_DATA_WIDTH 32
#define CHROM_SEG_23_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_23_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_23_EDGE_TYPE NONE
#define CHROM_SEG_23_FREQ 50000000
#define CHROM_SEG_23_HAS_IN 0
#define CHROM_SEG_23_HAS_OUT 1
#define CHROM_SEG_23_HAS_TRI 0
#define CHROM_SEG_23_IRQ_TYPE NONE
#define CHROM_SEG_23_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_22', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_22_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_22_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_22_COMPONENT_NAME chrom_seg_22
#define CHROM_SEG_22_BASE 0x401f0
#define CHROM_SEG_22_SPAN 16
#define CHROM_SEG_22_END 0x401ff
#define CHROM_SEG_22_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_22_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_22_CAPTURE 0
#define CHROM_SEG_22_DATA_WIDTH 32
#define CHROM_SEG_22_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_22_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_22_EDGE_TYPE NONE
#define CHROM_SEG_22_FREQ 50000000
#define CHROM_SEG_22_HAS_IN 0
#define CHROM_SEG_22_HAS_OUT 1
#define CHROM_SEG_22_HAS_TRI 0
#define CHROM_SEG_22_IRQ_TYPE NONE
#define CHROM_SEG_22_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_21', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_21_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_21_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_21_COMPONENT_NAME chrom_seg_21
#define CHROM_SEG_21_BASE 0x40200
#define CHROM_SEG_21_SPAN 16
#define CHROM_SEG_21_END 0x4020f
#define CHROM_SEG_21_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_21_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_21_CAPTURE 0
#define CHROM_SEG_21_DATA_WIDTH 32
#define CHROM_SEG_21_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_21_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_21_EDGE_TYPE NONE
#define CHROM_SEG_21_FREQ 50000000
#define CHROM_SEG_21_HAS_IN 0
#define CHROM_SEG_21_HAS_OUT 1
#define CHROM_SEG_21_HAS_TRI 0
#define CHROM_SEG_21_IRQ_TYPE NONE
#define CHROM_SEG_21_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_20', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_20_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_20_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_20_COMPONENT_NAME chrom_seg_20
#define CHROM_SEG_20_BASE 0x40210
#define CHROM_SEG_20_SPAN 16
#define CHROM_SEG_20_END 0x4021f
#define CHROM_SEG_20_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_20_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_20_CAPTURE 0
#define CHROM_SEG_20_DATA_WIDTH 32
#define CHROM_SEG_20_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_20_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_20_EDGE_TYPE NONE
#define CHROM_SEG_20_FREQ 50000000
#define CHROM_SEG_20_HAS_IN 0
#define CHROM_SEG_20_HAS_OUT 1
#define CHROM_SEG_20_HAS_TRI 0
#define CHROM_SEG_20_IRQ_TYPE NONE
#define CHROM_SEG_20_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_19', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_19_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_19_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_19_COMPONENT_NAME chrom_seg_19
#define CHROM_SEG_19_BASE 0x40220
#define CHROM_SEG_19_SPAN 16
#define CHROM_SEG_19_END 0x4022f
#define CHROM_SEG_19_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_19_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_19_CAPTURE 0
#define CHROM_SEG_19_DATA_WIDTH 32
#define CHROM_SEG_19_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_19_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_19_EDGE_TYPE NONE
#define CHROM_SEG_19_FREQ 50000000
#define CHROM_SEG_19_HAS_IN 0
#define CHROM_SEG_19_HAS_OUT 1
#define CHROM_SEG_19_HAS_TRI 0
#define CHROM_SEG_19_IRQ_TYPE NONE
#define CHROM_SEG_19_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_18', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_18_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_18_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_18_COMPONENT_NAME chrom_seg_18
#define CHROM_SEG_18_BASE 0x40230
#define CHROM_SEG_18_SPAN 16
#define CHROM_SEG_18_END 0x4023f
#define CHROM_SEG_18_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_18_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_18_CAPTURE 0
#define CHROM_SEG_18_DATA_WIDTH 32
#define CHROM_SEG_18_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_18_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_18_EDGE_TYPE NONE
#define CHROM_SEG_18_FREQ 50000000
#define CHROM_SEG_18_HAS_IN 0
#define CHROM_SEG_18_HAS_OUT 1
#define CHROM_SEG_18_HAS_TRI 0
#define CHROM_SEG_18_IRQ_TYPE NONE
#define CHROM_SEG_18_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_17', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_17_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_17_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_17_COMPONENT_NAME chrom_seg_17
#define CHROM_SEG_17_BASE 0x40240
#define CHROM_SEG_17_SPAN 16
#define CHROM_SEG_17_END 0x4024f
#define CHROM_SEG_17_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_17_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_17_CAPTURE 0
#define CHROM_SEG_17_DATA_WIDTH 32
#define CHROM_SEG_17_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_17_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_17_EDGE_TYPE NONE
#define CHROM_SEG_17_FREQ 50000000
#define CHROM_SEG_17_HAS_IN 0
#define CHROM_SEG_17_HAS_OUT 1
#define CHROM_SEG_17_HAS_TRI 0
#define CHROM_SEG_17_IRQ_TYPE NONE
#define CHROM_SEG_17_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_16', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_16_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_16_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_16_COMPONENT_NAME chrom_seg_16
#define CHROM_SEG_16_BASE 0x40250
#define CHROM_SEG_16_SPAN 16
#define CHROM_SEG_16_END 0x4025f
#define CHROM_SEG_16_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_16_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_16_CAPTURE 0
#define CHROM_SEG_16_DATA_WIDTH 32
#define CHROM_SEG_16_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_16_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_16_EDGE_TYPE NONE
#define CHROM_SEG_16_FREQ 50000000
#define CHROM_SEG_16_HAS_IN 0
#define CHROM_SEG_16_HAS_OUT 1
#define CHROM_SEG_16_HAS_TRI 0
#define CHROM_SEG_16_IRQ_TYPE NONE
#define CHROM_SEG_16_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_15', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_15_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_15_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_15_COMPONENT_NAME chrom_seg_15
#define CHROM_SEG_15_BASE 0x40260
#define CHROM_SEG_15_SPAN 16
#define CHROM_SEG_15_END 0x4026f
#define CHROM_SEG_15_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_15_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_15_CAPTURE 0
#define CHROM_SEG_15_DATA_WIDTH 32
#define CHROM_SEG_15_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_15_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_15_EDGE_TYPE NONE
#define CHROM_SEG_15_FREQ 50000000
#define CHROM_SEG_15_HAS_IN 0
#define CHROM_SEG_15_HAS_OUT 1
#define CHROM_SEG_15_HAS_TRI 0
#define CHROM_SEG_15_IRQ_TYPE NONE
#define CHROM_SEG_15_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_14', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_14_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_14_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_14_COMPONENT_NAME chrom_seg_14
#define CHROM_SEG_14_BASE 0x40270
#define CHROM_SEG_14_SPAN 16
#define CHROM_SEG_14_END 0x4027f
#define CHROM_SEG_14_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_14_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_14_CAPTURE 0
#define CHROM_SEG_14_DATA_WIDTH 32
#define CHROM_SEG_14_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_14_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_14_EDGE_TYPE NONE
#define CHROM_SEG_14_FREQ 50000000
#define CHROM_SEG_14_HAS_IN 0
#define CHROM_SEG_14_HAS_OUT 1
#define CHROM_SEG_14_HAS_TRI 0
#define CHROM_SEG_14_IRQ_TYPE NONE
#define CHROM_SEG_14_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_13', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_13_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_13_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_13_COMPONENT_NAME chrom_seg_13
#define CHROM_SEG_13_BASE 0x40280
#define CHROM_SEG_13_SPAN 16
#define CHROM_SEG_13_END 0x4028f
#define CHROM_SEG_13_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_13_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_13_CAPTURE 0
#define CHROM_SEG_13_DATA_WIDTH 32
#define CHROM_SEG_13_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_13_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_13_EDGE_TYPE NONE
#define CHROM_SEG_13_FREQ 50000000
#define CHROM_SEG_13_HAS_IN 0
#define CHROM_SEG_13_HAS_OUT 1
#define CHROM_SEG_13_HAS_TRI 0
#define CHROM_SEG_13_IRQ_TYPE NONE
#define CHROM_SEG_13_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_12', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_12_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_12_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_12_COMPONENT_NAME chrom_seg_12
#define CHROM_SEG_12_BASE 0x40290
#define CHROM_SEG_12_SPAN 16
#define CHROM_SEG_12_END 0x4029f
#define CHROM_SEG_12_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_12_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_12_CAPTURE 0
#define CHROM_SEG_12_DATA_WIDTH 32
#define CHROM_SEG_12_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_12_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_12_EDGE_TYPE NONE
#define CHROM_SEG_12_FREQ 50000000
#define CHROM_SEG_12_HAS_IN 0
#define CHROM_SEG_12_HAS_OUT 1
#define CHROM_SEG_12_HAS_TRI 0
#define CHROM_SEG_12_IRQ_TYPE NONE
#define CHROM_SEG_12_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_11', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_11_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_11_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_11_COMPONENT_NAME chrom_seg_11
#define CHROM_SEG_11_BASE 0x402a0
#define CHROM_SEG_11_SPAN 16
#define CHROM_SEG_11_END 0x402af
#define CHROM_SEG_11_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_11_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_11_CAPTURE 0
#define CHROM_SEG_11_DATA_WIDTH 32
#define CHROM_SEG_11_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_11_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_11_EDGE_TYPE NONE
#define CHROM_SEG_11_FREQ 50000000
#define CHROM_SEG_11_HAS_IN 0
#define CHROM_SEG_11_HAS_OUT 1
#define CHROM_SEG_11_HAS_TRI 0
#define CHROM_SEG_11_IRQ_TYPE NONE
#define CHROM_SEG_11_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_10', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_10_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_10_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_10_COMPONENT_NAME chrom_seg_10
#define CHROM_SEG_10_BASE 0x402b0
#define CHROM_SEG_10_SPAN 16
#define CHROM_SEG_10_END 0x402bf
#define CHROM_SEG_10_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_10_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_10_CAPTURE 0
#define CHROM_SEG_10_DATA_WIDTH 32
#define CHROM_SEG_10_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_10_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_10_EDGE_TYPE NONE
#define CHROM_SEG_10_FREQ 50000000
#define CHROM_SEG_10_HAS_IN 0
#define CHROM_SEG_10_HAS_OUT 1
#define CHROM_SEG_10_HAS_TRI 0
#define CHROM_SEG_10_IRQ_TYPE NONE
#define CHROM_SEG_10_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_9', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_9_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_9_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_9_COMPONENT_NAME chrom_seg_9
#define CHROM_SEG_9_BASE 0x402c0
#define CHROM_SEG_9_SPAN 16
#define CHROM_SEG_9_END 0x402cf
#define CHROM_SEG_9_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_9_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_9_CAPTURE 0
#define CHROM_SEG_9_DATA_WIDTH 32
#define CHROM_SEG_9_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_9_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_9_EDGE_TYPE NONE
#define CHROM_SEG_9_FREQ 50000000
#define CHROM_SEG_9_HAS_IN 0
#define CHROM_SEG_9_HAS_OUT 1
#define CHROM_SEG_9_HAS_TRI 0
#define CHROM_SEG_9_IRQ_TYPE NONE
#define CHROM_SEG_9_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_8', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_8_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_8_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_8_COMPONENT_NAME chrom_seg_8
#define CHROM_SEG_8_BASE 0x402d0
#define CHROM_SEG_8_SPAN 16
#define CHROM_SEG_8_END 0x402df
#define CHROM_SEG_8_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_8_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_8_CAPTURE 0
#define CHROM_SEG_8_DATA_WIDTH 32
#define CHROM_SEG_8_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_8_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_8_EDGE_TYPE NONE
#define CHROM_SEG_8_FREQ 50000000
#define CHROM_SEG_8_HAS_IN 0
#define CHROM_SEG_8_HAS_OUT 1
#define CHROM_SEG_8_HAS_TRI 0
#define CHROM_SEG_8_IRQ_TYPE NONE
#define CHROM_SEG_8_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_7', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_7_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_7_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_7_COMPONENT_NAME chrom_seg_7
#define CHROM_SEG_7_BASE 0x402e0
#define CHROM_SEG_7_SPAN 16
#define CHROM_SEG_7_END 0x402ef
#define CHROM_SEG_7_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_7_CAPTURE 0
#define CHROM_SEG_7_DATA_WIDTH 32
#define CHROM_SEG_7_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_7_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_7_EDGE_TYPE NONE
#define CHROM_SEG_7_FREQ 50000000
#define CHROM_SEG_7_HAS_IN 0
#define CHROM_SEG_7_HAS_OUT 1
#define CHROM_SEG_7_HAS_TRI 0
#define CHROM_SEG_7_IRQ_TYPE NONE
#define CHROM_SEG_7_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_6', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_6_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_6_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_6_COMPONENT_NAME chrom_seg_6
#define CHROM_SEG_6_BASE 0x402f0
#define CHROM_SEG_6_SPAN 16
#define CHROM_SEG_6_END 0x402ff
#define CHROM_SEG_6_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_6_CAPTURE 0
#define CHROM_SEG_6_DATA_WIDTH 32
#define CHROM_SEG_6_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_6_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_6_EDGE_TYPE NONE
#define CHROM_SEG_6_FREQ 50000000
#define CHROM_SEG_6_HAS_IN 0
#define CHROM_SEG_6_HAS_OUT 1
#define CHROM_SEG_6_HAS_TRI 0
#define CHROM_SEG_6_IRQ_TYPE NONE
#define CHROM_SEG_6_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_5', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_5_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_5_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_5_COMPONENT_NAME chrom_seg_5
#define CHROM_SEG_5_BASE 0x40300
#define CHROM_SEG_5_SPAN 16
#define CHROM_SEG_5_END 0x4030f
#define CHROM_SEG_5_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_5_CAPTURE 0
#define CHROM_SEG_5_DATA_WIDTH 32
#define CHROM_SEG_5_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_5_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_5_EDGE_TYPE NONE
#define CHROM_SEG_5_FREQ 50000000
#define CHROM_SEG_5_HAS_IN 0
#define CHROM_SEG_5_HAS_OUT 1
#define CHROM_SEG_5_HAS_TRI 0
#define CHROM_SEG_5_IRQ_TYPE NONE
#define CHROM_SEG_5_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_4', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_4_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_4_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_4_COMPONENT_NAME chrom_seg_4
#define CHROM_SEG_4_BASE 0x40310
#define CHROM_SEG_4_SPAN 16
#define CHROM_SEG_4_END 0x4031f
#define CHROM_SEG_4_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_4_CAPTURE 0
#define CHROM_SEG_4_DATA_WIDTH 32
#define CHROM_SEG_4_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_4_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_4_EDGE_TYPE NONE
#define CHROM_SEG_4_FREQ 50000000
#define CHROM_SEG_4_HAS_IN 0
#define CHROM_SEG_4_HAS_OUT 1
#define CHROM_SEG_4_HAS_TRI 0
#define CHROM_SEG_4_IRQ_TYPE NONE
#define CHROM_SEG_4_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_3_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_3_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_3_COMPONENT_NAME chrom_seg_3
#define CHROM_SEG_3_BASE 0x40320
#define CHROM_SEG_3_SPAN 16
#define CHROM_SEG_3_END 0x4032f
#define CHROM_SEG_3_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_3_CAPTURE 0
#define CHROM_SEG_3_DATA_WIDTH 32
#define CHROM_SEG_3_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_3_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_3_EDGE_TYPE NONE
#define CHROM_SEG_3_FREQ 50000000
#define CHROM_SEG_3_HAS_IN 0
#define CHROM_SEG_3_HAS_OUT 1
#define CHROM_SEG_3_HAS_TRI 0
#define CHROM_SEG_3_IRQ_TYPE NONE
#define CHROM_SEG_3_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_2_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_2_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_2_COMPONENT_NAME chrom_seg_2
#define CHROM_SEG_2_BASE 0x40330
#define CHROM_SEG_2_SPAN 16
#define CHROM_SEG_2_END 0x4033f
#define CHROM_SEG_2_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_2_CAPTURE 0
#define CHROM_SEG_2_DATA_WIDTH 32
#define CHROM_SEG_2_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_2_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_2_EDGE_TYPE NONE
#define CHROM_SEG_2_FREQ 50000000
#define CHROM_SEG_2_HAS_IN 0
#define CHROM_SEG_2_HAS_OUT 1
#define CHROM_SEG_2_HAS_TRI 0
#define CHROM_SEG_2_IRQ_TYPE NONE
#define CHROM_SEG_2_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_1_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_1_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_1_COMPONENT_NAME chrom_seg_1
#define CHROM_SEG_1_BASE 0x40340
#define CHROM_SEG_1_SPAN 16
#define CHROM_SEG_1_END 0x4034f
#define CHROM_SEG_1_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_1_CAPTURE 0
#define CHROM_SEG_1_DATA_WIDTH 32
#define CHROM_SEG_1_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_1_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_1_EDGE_TYPE NONE
#define CHROM_SEG_1_FREQ 50000000
#define CHROM_SEG_1_HAS_IN 0
#define CHROM_SEG_1_HAS_OUT 1
#define CHROM_SEG_1_HAS_TRI 0
#define CHROM_SEG_1_IRQ_TYPE NONE
#define CHROM_SEG_1_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_0_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_0_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_0_COMPONENT_NAME chrom_seg_0
#define CHROM_SEG_0_BASE 0x40350
#define CHROM_SEG_0_SPAN 16
#define CHROM_SEG_0_END 0x4035f
#define CHROM_SEG_0_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_0_CAPTURE 0
#define CHROM_SEG_0_DATA_WIDTH 32
#define CHROM_SEG_0_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_0_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_0_EDGE_TYPE NONE
#define CHROM_SEG_0_FREQ 50000000
#define CHROM_SEG_0_HAS_IN 0
#define CHROM_SEG_0_HAS_OUT 1
#define CHROM_SEG_0_HAS_TRI 0
#define CHROM_SEG_0_IRQ_TYPE NONE
#define CHROM_SEG_0_RESET_VALUE 0


#endif /* _ALTERA_HPS_0_H_ */
